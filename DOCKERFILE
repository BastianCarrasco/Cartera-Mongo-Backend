# Dockerfile

# Stage 1: Build the Go application
FROM golang:1.22-alpine AS builder

WORKDIR /app

# Instala Git para go mod download si necesitas módulos privados (aunque Railway suele tenerlo)
RUN apk add --no-cache git

# Copia go.mod y go.sum primero para aprovechar el cache de Docker
COPY go.mod .
COPY go.sum .

# Descarga los módulos de Go
RUN go mod download

# Instala la herramienta swag CLI
# Esto se instala en GOPATH/bin, que ya está en el PATH del contenedor
RUN go install github.com/swaggo/swag/cmd/swag@latest

# Copia el resto del código fuente de la aplicación
COPY . .

# Genera los docs de Swagger y construye la aplicación Go en la MISMA capa
# Aquí está la corrección: swag init Y go build en la misma línea
RUN swag init ; go build -o server .

# Stage 2: Create the final lean image
FROM alpine:latest

# Set timezone (opcional, pero buena práctica)
RUN apk add --no-cache tzdata
ENV TZ America/Santiago # O tu zona horaria

WORKDIR /app

# Copia el ejecutable construido desde la etapa builder
COPY --from=builder /app/server .

# Copia los archivos de Swagger UI (generados en la etapa builder)
# Esto es esencial para que Swagger UI funcione en el navegador
COPY --from=builder /app/docs ./docs

# Expone el puerto en el que tu aplicación escucha
EXPOSE 8080

# Comando para ejecutar la aplicación
CMD ["./server"]